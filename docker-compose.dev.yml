services:
  minio:
    image: quay.io/minio/minio:${MINIO_VERSION}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      start_interval: 5s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    ports:
      - "9000:9000"
      - "9001:9001"
    restart: always
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio:/data
    command: server /data --console-address ":9001"
    networks:
      - storage

  keycloak:
    image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION:-latest}
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: [ 'CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:9000/health/live' ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
      start_interval: 5s
    environment:
      - KC_METRICS_ENABLED=true
      - KC_HEALTH_ENABLED=true
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://${KEYCLOAK_DB_HOST:-postgres}/${KEYCLOAK_DB:-keycloak}
      - KC_DB_USERNAME=${KEYCLOAK_DB_USER:-keycloak}
      - KC_DB_PASSWORD=${KEYCLOAK_DB_PASSWORD:-keycloak}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KEYCLOAK_ROOT_PASSWORD}
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
    depends_on:
      postgres:
        condition: 'service_healthy'
    restart: 'always'
    # TODO create custom theme
    #volumes:
    #  - ./docker/keycloak/themes:/opt/keycloak/themes
    networks:
      - identity
      - database
    command:
      - "start-dev"
      - "--proxy-headers=xforwarded"
      - "--hostname=https://127.0.0.1:20443/"

  proxy:
    image: nginx:alpine
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80/" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
      start_interval: 5s
    ports:
      - "20443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/certs:/etc/nginx/certs
    depends_on:
      keycloak:
        condition: 'service_healthy'
    networks:
      - identity

  postgres:
    image: postgis/postgis:${POSTGRES_VERSION}
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "$POSTGRES_USER", "-d", "maindb" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
      start_interval: 5s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    ports:
      - "5432:5432"
    restart: always
    shm_size: 128mb
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=maindb
      - POSTGRES_MANAGER_PASSWORD=${POSTGRES_MANAGER_PASSWORD}
      - POSTGRES_KEYCLOAK_PASSWORD=${POSTGRES_KEYCLOAK_PASSWORD}
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./docker/init_db.sh:/docker-entrypoint-initdb.d/init_db.sh
    networks:
      - database

networks:
  database:
  storage:
  identity:

volumes:
  database:
  postgres:
  minio:
  rabbitmq:
